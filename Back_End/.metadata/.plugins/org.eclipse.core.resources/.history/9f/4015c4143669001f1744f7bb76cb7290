package com.ihub.www.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeService.class);

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        logger.info("Fetching all employees");
        return employeeRepository.findAll();
    }

    public Employee createEmployee(Employee employee) {
        logger.info("Creating new employee: {}", employee);
        return employeeRepository.save(employee);
    }

    public Employee getEmployeeById(Long id) {
        logger.info("Fetching employee with id: {}", id);
        return employeeRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Employee with id " + id + " not found"));
    }

    @Transactional
    public ResponseEntity<Employee> updateEmployee(Long id, Employee employee) {
        logger.info("Updating employee with id: {}", id);
        Employee emp = employeeRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Employee with id " + id + " does not exist"));
        emp.setFirstName(employee.getFirstName());
        emp.setLastName(employee.getLastName());
        emp.setEmail(employee.getEmail());
        Employee updateEmp = employeeRepository.save(emp);
        return ResponseEntity.ok(updateEmp);
    }

    public ResponseEntity<HttpStatus> deleteEmployee(long id) {
        logger.info("Deleting employee with id: {}", id);
        Employee employee = employeeRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Employee with id " + id + " does not exist"));
        employeeRepository.delete(employee);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
